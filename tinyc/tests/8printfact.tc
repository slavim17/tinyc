void prt(int a){
    print(cast<char>(a));
    return;
}
 void printnum(int a ){

     if(a < 0 ) {
        print('<');
        return;
     }else if ( a == 0 ){
        print('0');
        return;
     }else {
        print('>');
        print('\n');
     }

     int dec =1;
     while(dec < a){
         dec = dec *10;
     }
     dec = dec /10;

     while(dec > 0){
     int div =a / dec;
     a = a - div * dec;
     dec = dec /10;
     switch(div){
         case 0:
         print('0');
         break;
         case 1:
         print('1');
         break;
         case 2:
         print('2');
         break;
         case 3:
         print('3');
         break;
         case 4:
         print('4');
         break;
         case 5:
         print('5');
         break;
         case 6:
         print('6');
         break;
         case 7:
         print('7');
         break;
         case 8:
         print('8');
         break;
         case 9:
         print('9');
         break;
         }
     }
    print('\n');
     return;
 }

                                    // AST                                           -> IL
double fact(double n) {                   // Function("fact", Integer)
                                //                                                   -> n       = ArgAddr(0)
    //print(cast<char>(n));
    if(n == 0.0) {                    // ASTIf // ASTBinaryOp
                                                // ASTIdentifier // ASTInteger       -> t1 = Load (n : addr)
                                            //                                       -> t2 = LoadImm(0)
                                            //                                       -> t3 = BinOp(==, t1, t2)
                                            //                                       -> jump = CondJump(t3)
                                            //                                       -> jump->addTerget(bbAfter)
                                            //                                       -> jump->addTerget(bbTrue)
                                            //                      BasicBlock * bbTrue:
        return 1.0;                   // ASTReturn // ASTInteger                      -> t4 = LoadIm(1)
                                                 //                                 -> return t4;
    }
                                            //                      BasicBlock * bbAfter:

    //return n * fact(n - 1);
    return                          // ASTReturn
    n                               // ASTIdentifier                                -> t5 = Load(r0)
    *                               // ASTBinOp
     fact(                          // ASTCall
            n                       // ASTIdentifier                                -> t6 = Load(r0)
            -                       // ASTBinaryOp
            1.0);                     // ASTInteger                                   -> t7 = LoadImm(1)
                                    //                                              -> t8 = BinOp(-, t6, t7)
                                    //                                              -> t9 = CallStatic ( fact,  [t8] )
                                    //                                              -> t10= BinOp(*, t5, t9)
                                    //                                              -> t11= Return (t10)

}

int main(){                         // Function("main", Integer)

    double b = 5.0;
    int a = cast<int>(
     fact(3.0)
    //b
    );
    if(a == 5) {
        print('1');
    }else{
        print('0');
    }

    printnum(a);

    //prt(a);
    return a;
                                                            // ASTInteger            ->  t12 = LoadImm(1)
                                                            //                       ->  t13 = CallStatic( fact, t12)
                                                            //                       ->  Return(t13 : retValue)
    //! 6
}
